{
  "name": "redlock",
  "version": "0.2.0",
  "description": "A node.js redlock implementation for distributed redis locks",
  "main": "redlock.js",
  "scripts": {
    "test": "istanbul cover mocha",
    "test-ci": "istanbul cover _mocha --report lcovonly -- -R spec && cat ./coverage/lcov.info | coveralls"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/mike-marcacci/node-redlock.git"
  },
  "keywords": [
    "nodejs",
    "iojs",
    "redlock",
    "distributed",
    "lock",
    "redis"
  ],
  "author": {
    "name": "Mike Marcacci"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/mike-marcacci/node-redlock/issues"
  },
  "homepage": "https://github.com/mike-marcacci/node-redlock",
  "devDependencies": {
    "chai": "^3.0.0",
    "coveralls": "^2.11.2",
    "istanbul": "^0.3.14",
    "mocha": "^2.2.5",
    "redis": "^0.12.1"
  },
  "dependencies": {},
  "config": {
    "blanket": {
      "pattern": [
        "redlock.js"
      ]
    }
  },
  "readme": "[![Build Status](https://travis-ci.org/mike-marcacci/node-redlock.svg)](https://travis-ci.org/mike-marcacci/node-redlock)\n[![Coverage Status](https://coveralls.io/repos/mike-marcacci/node-redlock/badge.svg)](https://coveralls.io/r/mike-marcacci/node-redlock)\n\nRedlock\n=======\nThis is a node.js implementation of the [redlock](http://redis.io/topics/distlock) algorithm for distributed redis locks. It provides strong guarantees in both single-redis and clustered redis environments, and is fault tolerant in the latter.\n\nInstallation\n------------\n```bash\nnpm install --save redlock\n```\n\nConfiguration\n-------------\nRedlock can use [node redis](https://github.com/mranney/node_redis) or any compatible redis library to keep its client connections.\n\nA redlock object is instantiated with a required `options` parameter and at least one redis client parameter. Properties of the Redlock object should **NOT** be changed after it is first used, as doing so could have unintended consequences for currently-processing locks.\n\n```js\nvar client1 = require('redis').createClient(6379, 'redis1.example.com');\nvar client2 = require('redis').createClient(6379, 'redis2.example.com');\nvar Redlock = require('redlock');\n\nvar redlock = new Redlock(\n\t{\n\t\t// the expected clock drift; for more details\n\t\t// see http://redis.io/topics/distlock\n\t\tdriftFactor: 0.01,\n\t\t\n\t\t// the max number of times Redlock will attempt\n\t\t// to lock a resource before erroring\n\t\tretryCount:  3,\n\t\t\n\t\t// the time in ms between attempts\n\t\tretryDelay:  200\n\t},\n\t\n\t// you should have one client for each redis node\n\t// in your cluster\n\tclient1,\n\tclient2\n);\n```\n\n\nUsage\n-----\n\n\n###Locking & Unocking\n\n```js\n\n// the string identifier for the resource you want to lock\nvar resource = 'locks:account:322456';\n\n// the maximum amount of time you want the resource locked,\n// keeping in mind that you can extend the lock up until\n// the point when it expires\nvar ttl = 1000;\n\nredlock.lock(resource, ttl, function(err, lock) {\n\n\t// we failed to lock the resource\n\tif(err) {\n\t\t// ...\n\t}\n\t\n\t// we have the lock\n\telse {\n\n\n\t\t// ...do something here...\n\n\n\t\t// unlock your resource when you are done\n\t\tlock.unlock();\n\t}\n});\n\n```\n\n\n###Locking and Extending\n\n```js\nredlock.lock('locks:account:322456', 1000, function(err, lock) {\n\n\t// we failed to lock the resource\n\tif(err) {\n\t\t// ...\n\t}\n\t\n\t// we have the lock\n\telse {\n\n\n\t\t// ...do something here...\n\n\n\t\t// if you need more time, you can continue to extend\n\t\t// the lock until it expires\n\t\tlock.extend(1000, function(err, lock){\n\n\t\t\t// we failed to extend the lock on the resource\n\t\t\tif(err) {\n\t\t\t\t// ...\n\t\t\t}\n\n\n\t\t\t// ...do something here...\n\n\n\t\t\t// unlock your resource when you are done\n\t\t\tlock.unlock();\n\t\t}\n\t}\n});\n\n```\n\nAPI Docs\n--------\n\n###`Redlock.lock(resource, ttl, callback)`\n- `resource (string)` resource to be locked\n- `ttl (number)` time in ms until the lock expires\n- `callback (function)` callback returning:\n\t- `err (Error)`\n\t- `lock (Lock)`\n\n\n###`Redlock.unlock(lock, callback)`\n- `lock (Lock)` lock to be released\n- `callback (function)` callback with no returning arguments\n\n\n###`Redlock.extend(lock, ttl, callback)`\n- `lock (Lock)` lock to be extended\n- `ttl (number)` time in ms to extend the lock's expiration\n- `callback (function)` callback returning:\n\t- `err (Error)`\n\t- `lock (Lock)`\n\n\n###`Lock.unlock(callback)`\n- `callback (function)` callback with no returning arguments\n\n\n###`Lock.extend(ttl, callback)`\n- `ttl (number)` time in ms to extend the lock's expiration\n- `callback (function)` callback returning:\n\t- `err (Error)`\n\t- `lock (Lock)`\n\n",
  "readmeFilename": "README.md",
  "_id": "redlock@0.2.0",
  "_from": "redlock@0.2.0"
}
